-----------------------------------Tarefas de Hoje----------------------------

->Comecei a trazer todos os diálogos para o sistema. Criei um método que armazena todas as listas de frases e cria um método de acesso para todas elas. Dessa forma, consigo acessar todos os diálogos de forma simples. 
	-->Como antes eu usava as listas na classe Game e agora eu acesso elas por ListasDialogicas, acontece um problema. Para que eu automatizasse a contagem de quantas linhas possuem na lista que estamos atualmete, escrevi o método "DecisaoDialogicaList(string nomeDaLista)" que retorna uma lista com o nome	passado como parâmetro (que é a decisão dialógica). Então, fazíamos o seguinte: 
	
            if (contador > DecisaoDialogicaList(escolhaDialogica).Count)
	    {
                contador = DecisaoDialogicaList(escolhaDialogica).Count;
                //Paro na última ou a primeira frase da lista.
            }
            else 
            {
                contador++;
		//Inicialmente o contador é zero. E vamos percorrer exatamente a quantidade
		//de valores dentro da lista repassada.
            }

Isso funciona muito bem, se estivermo usando as listas dentro de Game mas agora não podemos fazer mais isso. Se eu tentar acessar as listas dentro de ListasDialogicas, vamos estar limitados à qtd de valores adicionados na lista local (que ainda existe, por causa de testes.) Então em um cenário sem esses valores, daria erro. Então, posso reutilizar o mesmo método DecisaoDialogicaList(), repassando o nome das listas possíveis juntamente com as rotas e a EscolhaDialogica. Dessa forma, acredito eu que vamos conseguir transportar o jogador para todas as rotas possíves.


Resumindo. 
->A escolhaDialogica precisa ter uma lista dentro de DecisaoDialogicaList().Dessa forma, consigo utilizar a mesma lógica mudando apenas os valores utilizados.
->Preciso colocar a opcao de escolhaDialogica dentro da minha lógica de escolha de capítulos.
->Preciso colocar uma vez acrescentando diálogo e outra vez decrescendo o diálogo.
->Para salvamentos, preciso colocar essa opcao de escolhaDialogica dentro dele tmb.













->Ideia de tradução do Idioma: quando eu conseguir corrigir e inputar todos os diálogos na classe de ListasDialogicas, tudo já vai estar no padrão correto. Dessa forma, pra eu conseguir traduzir tudo é muito mais rápido e fácil. E aí, com um switch no início do código eu consigo selecionar para qual idioma devemos entrar e utilizamos exatamente os mesmos nomes de métodos, mudamos apenas o objeto da classe para acesso. Dessa forma, o sistema de idiomas estará completo.

->Sistema de avatares: o sistema de avateres funcionará de forma muito simples. Se o TMP de diálogo de game começar com um nome "Yael" ou "Pássaro", então esse avatar deve aparecer e todos os outros devem ser ocultados.


->Quando eu entro no pause ou em outra tela, e clico em qualquer coisa o jogo identifica como se eu estivesse jogando e avança os diálogos. Eu não posso deixar isso acontecer. Eu já pesquisei, existe um metodo que pausa o que estiver rolando em uma cena. Eu devo deixar isso ser aplicado quando eu entro no pause. Pra resolver isso, tenho que adicionar a clausula que nao deixa eu clicar se o estiver fora de qualque cena que nao seja game desde que o o pause esteja ativado

->Começar a construir o sistema de Avatares. Dependendo do Texto que for aparecer na tela, haverá um nome inicial. Esse nome será usado para definir qual avatar deve aparecer na tela. Dependendo do nome, aparecerá um avatar e os outros devem ser ocultados. 

->Começar a construir a nova Demo

->A meta hoje é entregar o sistema de save, load, pause e notificação prontos no commit 7.
Dps disso, vou começar a trabalhar dentro do sistema de avatares. E quando esse sistema estiver pronto, aí poderei começar a trazer os meus assets para dentro do Alter Ego e aí, construir a primeira Demo. Se hoje eu não conseguir fazer o commit 7, então deixo essas tarefas para amanhã.

->Se eu começar a trazer os assets e construir o sistema de avatares, entao eu devo mexer com resoluções. Acho que a forma mais fácil e simples de fazer isso é criando interruptores que dizem em qual resolução deve ser jogado e um outro sistema que identifica automaticamente a resolução para o jogador não ter dor de cabeça com a tela quebrada.

-------------------------Concluídos de hoje----------------------



---------------------Pendentes de hoje---------------------





-----------------Comandos para converter LF em CRLF---------
Acesse o terminal do git bash;

Acesse o diretório onde está os arquivos do projeto:
cd "/c/Saphire Game Studio/Projetos Unity/AlterEgoClone/AlterEgo"
cd C:\Projetos Unity\AlterEgo

Dps solte esse comando no terminal:
git config --global core.autocrlf true

E dps converta os arquivos do terminal de LF (linux) para CRL (windows):
converte de LF para CRLF:

find . -type f -exec unix2dos.exe {} \;

Se tudo der certo, vc já vai poder commitar e dar o push no github.

Bônus: (Caso vc precise):
# converte de CRLF para LF:
find . -type f -exec dos2unix.exe {} \;

-----------------Configurações-------------

-Tela/resolução (diria que é bem mais complicado)
-Audio/Spotify (relativamente fácil)
-Idioma - ptbr-ing (bem mais difícil)
-ideia de sistema de idioma: criar uma classe que será um selecionador de idioma.
Se o idioma escolhido for português, todas as variaveis TMP devem ser português.
Isso significa que esse método deve conseguir traduzir tudo o que estiver de texto para o idioma escolhido. Já adianto que esse idioma provavelmente deverá ser inicializado em todas as cenas, no background ou até mesmo dentro dos outros scripts. De repente ele pode entender em qual cena ou scrip estamos e já traduzir de acordo com o scrip escolhido. 

Posso colocar esse script em cada canto que seja inputado um text em algum TMP. E esse método se comunicaria com uma variável static que diria se o jogo deve ser português ou outro idioma definido a partir do menu de configurações ou

----------------Input de assets-------------
-Sistema de avatares (relativamente tranquilo)
-Listas de diálogo (relativamente tranquilo)

-Porte para android
-Ajustes finais

----------------Ideias de softwares para criar-----------------
Criar uma versao do snake para o console, esrito em c#.

--------------------Escolhas----------------------
Eu preciso de uma forma de controle das "escolhas do jogador", para que seja listada em uma espécie de "menu das escolhas realizadas", dessa forma será possível saber quais escolhas o jogador tomou. E ao mesmo tempo, criar um controle geral do progresso do jogador, para saber quais conquistas ele já desbloqueou e quais dados. Devo criar uma espécie de "controle de zeradas", onde eu saiba quantas vezes o jogador zerou o jogo e a partir das escolhas que ele fez, integrar com o sistema de "escolhas do jogador".

Esse sistema será usado para listar quais 


--------------------Achievements------------------
Criar um sistema onde seja possível desbloquear conquistas a partir da gameplay.

--------------------Efeitos especiais----------------------

Integrar efeitos especiais em um sistema de camadas. poderá chover ou nevar, e isso interferirá na interface do jogador.

--------------------Novos puzzles----------------------
Criar mais puzzles para a gameplay.








